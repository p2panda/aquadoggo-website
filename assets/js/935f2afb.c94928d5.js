"use strict";(self.webpackChunkaquadoggo_website=self.webpackChunkaquadoggo_website||[]).push([[53],{1109:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"about":[{"type":"link","label":"Introduction","href":"/about/","docId":"about/index","unlisted":false},{"type":"link","label":"Things we\'re interested in","href":"/about/things-were-interested-in","docId":"about/things-were-interested-in","unlisted":false},{"type":"link","label":"Roadmap","href":"/about/roadmap","docId":"about/roadmap","unlisted":false},{"type":"link","label":"How to contribute","href":"/about/contribute","docId":"about/contribute","unlisted":false},{"type":"link","label":"History","href":"/about/history","docId":"about/history","unlisted":false}],"learn":[{"type":"link","label":"Overview","href":"/learn/","docId":"learn/index","unlisted":false},{"type":"link","label":"Entries","href":"/learn/entries","docId":"learn/entries","unlisted":false},{"type":"link","label":"Operations and Documents","href":"/learn/operations","docId":"learn/operations","unlisted":false},{"type":"link","label":"Networks","href":"/learn/networks","docId":"learn/networks","unlisted":false}],"specifications":[{"type":"link","label":"Specifications","href":"/specifications/","docId":"specifications/index","unlisted":false},{"type":"link","label":"namakemono","href":"/specifications/namakemono/","docId":"specifications/namakemono/index","unlisted":false},{"type":"category","label":"aquadoggo API","items":[{"type":"link","label":"Introduction","href":"/specifications/aquadoggo/","docId":"specifications/aquadoggo/index","unlisted":false},{"type":"link","label":"Key Concepts","href":"/specifications/aquadoggo/key-concepts","docId":"specifications/aquadoggo/key-concepts","unlisted":false},{"type":"category","label":"Core data types","items":[{"type":"link","label":"Bamboo","href":"/specifications/aquadoggo/data-types/bamboo","docId":"specifications/aquadoggo/data-types/bamboo","unlisted":false},{"type":"link","label":"Key Pairs","href":"/specifications/aquadoggo/data-types/key-pairs","docId":"specifications/aquadoggo/data-types/key-pairs","unlisted":false},{"type":"link","label":"Operations","href":"/specifications/aquadoggo/data-types/operations","docId":"specifications/aquadoggo/data-types/operations","unlisted":false},{"type":"link","label":"Schemas","href":"/specifications/aquadoggo/data-types/schemas","docId":"specifications/aquadoggo/data-types/schemas","unlisted":false},{"type":"link","label":"Documents","href":"/specifications/aquadoggo/data-types/documents","docId":"specifications/aquadoggo/data-types/documents","unlisted":false},{"type":"link","label":"Document views","href":"/specifications/aquadoggo/data-types/document-views","docId":"specifications/aquadoggo/data-types/document-views","unlisted":false},{"type":"link","label":"Blobs","href":"/specifications/aquadoggo/data-types/blobs","docId":"specifications/aquadoggo/data-types/blobs","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"APIs","items":[{"type":"link","label":"Overview","href":"/specifications/aquadoggo/APIs/overview","docId":"specifications/aquadoggo/APIs/overview","unlisted":false},{"type":"link","label":"Publishing","href":"/specifications/aquadoggo/APIs/publishing","docId":"specifications/aquadoggo/APIs/publishing","unlisted":false},{"type":"link","label":"Queries","href":"/specifications/aquadoggo/APIs/queries","docId":"specifications/aquadoggo/APIs/queries","unlisted":false},{"type":"link","label":"Blob HTTP service","href":"/specifications/aquadoggo/APIs/blob-http","docId":"specifications/aquadoggo/APIs/blob-http","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"Networking","items":[{"type":"link","label":"Clients and nodes","href":"/specifications/aquadoggo/networking/clients-nodes","docId":"specifications/aquadoggo/networking/clients-nodes","unlisted":false},{"type":"link","label":"Networking","href":"/specifications/aquadoggo/networking/","docId":"specifications/aquadoggo/networking/networking","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"link","label":"Replication","href":"/specifications/aquadoggo/replication","docId":"specifications/aquadoggo/replication","unlisted":false},{"type":"link","label":"Canonical Encoding","href":"/specifications/aquadoggo/encoding-data","docId":"specifications/aquadoggo/encoding-data","unlisted":false},{"type":"link","label":"Glossary","href":"/specifications/aquadoggo/glossary","docId":"specifications/aquadoggo/glossary","unlisted":false}],"collapsed":true,"collapsible":true}]},"docs":{"about/contribute":{"id":"about/contribute","title":"How to contribute","description":"- Please read our Code of Conduct","sidebar":"about"},"about/history":{"id":"about/history","title":"History","description":"p2panda emerged out of activities around the self-curated zine BLATT 3000 (2014) and subsequent festivals VERANTWORTUNG 3000 (2016) and HOFFNUNG 3000 (2017), the latter of these being the catalyst for building a custom platform designed to help communities organise in a decentralised manner, also called HOFFNUNG 3000.","sidebar":"about"},"about/implementations":{"id":"about/implementations","title":"Implementations","description":"- we have built p2panda-rs, a Rust implementation of the p2panda specification"},"about/index":{"id":"about/index","title":"Introduction","description":"Local first","sidebar":"about"},"about/roadmap":{"id":"about/roadmap","title":"Roadmap","description":"Previous","sidebar":"about"},"about/things-were-interested-in":{"id":"about/things-were-interested-in","title":"Things we\'re interested in","description":"Lightweight clients that can easily be implemented as websites","sidebar":"about"},"contact":{"id":"contact","title":"Contact","description":"- Email: contributors@p2panda.org"},"faq":{"id":"faq","title":"FAQ","description":"Can I use p2panda already?"},"learn/entries":{"id":"learn/entries","title":"Entries","description":"While a lot in this document is still true for p2panda we\'ve slightly adjusted our core data types to look a little bit different, for example \\"Bamboo\\" got removed. You can read more about it in our namakemono specification. This section will be adjusted soon!","sidebar":"learn"},"learn/index":{"id":"learn/index","title":"Overview","description":"In this Learn section we want to introduce you to the concepts around p2panda. It will not be as formal as the Specification but also more theoretical than the Tutorials. With all of the other resources together you should get a good overview of what p2panda is about.","sidebar":"learn"},"learn/networks":{"id":"learn/networks","title":"Networks","description":"In p2panda we need at least two participants to call it a party: We need a Client and a Node. Okay, they don\u2019t sound like the most fun party guests, but we promise you, they are cool!","sidebar":"learn"},"learn/operations":{"id":"learn/operations","title":"Operations and Documents","description":"While a lot in this document is still true for p2panda we\'ve slightly adjusted our core data types to look a little bit different. You can read more about it in our namakemono specification. This section will be adjusted soon!","sidebar":"learn"},"links":{"id":"links","title":"Links","description":"<Links links={["},"sdks/index":{"id":"sdks/index","title":"SDKs","description":"p2panda"},"specifications/aquadoggo/APIs/blob-http":{"id":"specifications/aquadoggo/APIs/blob-http","title":"Blob HTTP service","description":"This document describes how Blobs are materialized to the filesystem and served from a node over HTTP endpoints.","sidebar":"specifications"},"specifications/aquadoggo/APIs/overview":{"id":"specifications/aquadoggo/APIs/overview","title":"Overview","description":"- Clients send queries to nodes in order to publish new entries and query materialised documents","sidebar":"specifications"},"specifications/aquadoggo/APIs/publishing":{"id":"specifications/aquadoggo/APIs/publishing","title":"Publishing","description":"- Clients use two GraphQL operations for publishing entries:","sidebar":"specifications"},"specifications/aquadoggo/APIs/queries":{"id":"specifications/aquadoggo/APIs/queries","title":"Queries","description":"- The GraphQL schema of a node changes depending on the schemas that are available on the node.","sidebar":"specifications"},"specifications/aquadoggo/authorisation":{"id":"specifications/aquadoggo/authorisation","title":"Authorisation","description":"While this section is almost fully complete and even implemented, it might be a little rough at the edges: We\'re still working on a fun to use high-level API!"},"specifications/aquadoggo/data-types/bamboo":{"id":"specifications/aquadoggo/data-types/bamboo","title":"Bamboo","description":"This section will soon be replaced with our new namakemono data type which is similar, but cooler.","sidebar":"specifications"},"specifications/aquadoggo/data-types/blobs":{"id":"specifications/aquadoggo/data-types/blobs","title":"Blobs","description":"The blob specification describes system schemas and validation conditions used when publishing binary application data. Blobs require their own materialization logic and these system schemas allow a node to distinguish blob documents from other application data and behave accordingly. Conceptually, blobs can be considered to be \\"attachments\\" on other documents. It is not intended that blobs alone serve as a general purpose content delivery system. We expect blobs to be attached to other documents via relation fields, replication and materialization logic can be optimized based on this assumption. See the blob http specification to read how blobs are materialized and served on a node.","sidebar":"specifications"},"specifications/aquadoggo/data-types/document-views":{"id":"specifications/aquadoggo/data-types/document-views","title":"Document views","description":"- Document views represent the immutable state of a document at a particular point in its history of edits","sidebar":"specifications"},"specifications/aquadoggo/data-types/documents":{"id":"specifications/aquadoggo/data-types/documents","title":"Documents","description":"- A Document is a high-level mutable, multi-writer data type constructed from a linked graph of operations.","sidebar":"specifications"},"specifications/aquadoggo/data-types/key-pairs":{"id":"specifications/aquadoggo/data-types/key-pairs","title":"Key Pairs","description":"This section will soon be replaced with our new namakemono data type which is similar, but cooler.","sidebar":"specifications"},"specifications/aquadoggo/data-types/operations":{"id":"specifications/aquadoggo/data-types/operations","title":"Operations","description":"This section will soon be replaced with our new namakemono data type which is similar, but cooler.","sidebar":"specifications"},"specifications/aquadoggo/data-types/schemas":{"id":"specifications/aquadoggo/data-types/schemas","title":"Schemas","description":"- Schemas are used to describe and validate the format in which data is published","sidebar":"specifications"},"specifications/aquadoggo/documents-and-schema":{"id":"specifications/aquadoggo/documents-and-schema","title":"Documents & Schema","description":"Documents"},"specifications/aquadoggo/encoding-data":{"id":"specifications/aquadoggo/encoding-data","title":"Canonical Encoding","description":"p2panda requires a canonical encoding format to guarantee that hashing a value produces the same result across all implementations.","sidebar":"specifications"},"specifications/aquadoggo/encryption":{"id":"specifications/aquadoggo/encryption","title":"Encryption","description":"While this section is almost fully complete and even implemented, it might be a little rough at the edges: We\'re still working on a fun to use high-level API!"},"specifications/aquadoggo/glossary":{"id":"specifications/aquadoggo/glossary","title":"Glossary","description":"Private Key*: The private key in a key pair, used for signing data.","sidebar":"specifications"},"specifications/aquadoggo/index":{"id":"specifications/aquadoggo/index","title":"aquadoggo API","description":"aquadoggo is a reference node implementation for p2panda. It is a intended as a tool for making the design and build of local-first, collaborative p2p applications as simple as possible, and hopefully even a little fun!","sidebar":"specifications"},"specifications/aquadoggo/key-concepts":{"id":"specifications/aquadoggo/key-concepts","title":"Key Concepts","description":"This is a short introduction into some of the higher level concepts which build on top of the core p2panda data types. You can dive deeper into any of these topics by visiting the relevant specification pages. Hopefully this gives you an introductory overview which will help contextualise the details later.","sidebar":"specifications"},"specifications/aquadoggo/networking/clients-nodes":{"id":"specifications/aquadoggo/networking/clients-nodes","title":"Clients and nodes","description":"- p2panda has a clear separation of clients and nodes to allow flexible setups and make client development easier","sidebar":"specifications"},"specifications/aquadoggo/networking/networking":{"id":"specifications/aquadoggo/networking/networking","title":"Networking","description":"Introduction","sidebar":"specifications"},"specifications/aquadoggo/replication":{"id":"specifications/aquadoggo/replication","title":"Replication","description":"Introduction","sidebar":"specifications"},"specifications/index":{"id":"specifications/index","title":"Specifications","description":"namakemono","sidebar":"specifications"},"specifications/namakemono/index":{"id":"specifications/namakemono/index","title":"namakemono","description":"\ud83e\udda5 namakemono = Sloth (Japanese) = Slow and forgetful = very delay-tolerant, offline-first and privacy-respecting \ud83e\ude77","sidebar":"specifications"},"tutorials/aquadoggo":{"id":"tutorials/aquadoggo","title":"Tutorial: Set up a local node","description":"This tutorial walks you through setting up a locally running p2panda node on your computer and shows you how you can configure it and interact with it via the GraphQL playground."},"tutorials/fishy":{"id":"tutorials/fishy","title":"Tutorial: Create a schema","description":"In this tutorial we want to register a new schema using the fishy command line tool and aquadoggo node."},"tutorials/index":{"id":"tutorials/index","title":"Tutorials","description":"Start and maintain a local aquadoggo node on your machine. Go to tutorial"},"tutorials/mushroom-app":{"id":"tutorials/mushroom-app","title":"Tutorial: Let\'s build a mushroom app!","description":"In this tutorial we will build an web app for finding and identifying mushrooms using p2panda. We will build the application with React, Webpack and TypeScript."},"tutorials/queries":{"id":"tutorials/queries","title":"Tutorial: Advanced Queries","description":"When building an app with p2panda using an aquadoggo node (embedded/local/shared) for your the"},"tutorials/send-to-node":{"id":"tutorials/send-to-node","title":"Tutorial: Create a schema","description":"In this tutorial we want to register a new schema on a p2panda node and create our first document with it! We will use the send-to-node command line tool and aquadoggo node for this."},"tutorials/tauri":{"id":"tutorials/tauri","title":"Tutorial: Embed a node in Tauri","description":"In this tutorial we will see how to embed an aquadoggo node in a Tauri app. Tauri is a framework for building apps which have a Rust backend and WebView frontend which will compile for all major desktop platforms (mobile coming soon). This means we can easily package our aquadoggo node alongside a frontend written in your favorite web framework (or none at all!)."}}}')}}]);