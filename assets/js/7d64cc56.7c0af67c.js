"use strict";(self.webpackChunkaquadoggo_website=self.webpackChunkaquadoggo_website||[]).push([[5569],{9500:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>h,contentTitle:()=>o,default:()=>l,frontMatter:()=>r,metadata:()=>a,toc:()=>c});var s=i(5893),t=i(1151);const r={id:"authorisation",title:"Authorisation"},o="Authorisation: Key Group",a={id:"specifications/aquadoggo/authorisation",title:"Authorisation",description:"While this section is almost fully complete and even implemented, it might be a little rough at the edges: We're still working on a fun to use high-level API!",source:"@site/docs/specifications/aquadoggo/authorisation.md",sourceDirName:"specifications/aquadoggo",slug:"/specifications/aquadoggo/authorisation",permalink:"/specifications/aquadoggo/authorisation",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{id:"authorisation",title:"Authorisation"}},h={},c=[{value:"Use Case",id:"use-case",level:2},{value:"Authorised Schemas",id:"authorised-schemas",level:2},{value:"Key groups",id:"key-groups",level:3},{value:"Schema <code>key_group_v1</code>",id:"schema-key_group_v1",level:4},{value:"Memberships",id:"memberships",level:3},{value:"Schema <code>key_group_membership_request_v1</code>",id:"schema-key_group_membership_request_v1",level:4},{value:"Schema <code>key_group_membership_v1</code>",id:"schema-key_group_membership_v1",level:4},{value:"Schema Field Definition: Field Type <code>owner</code>",id:"schema-field-definition-field-type-owner",level:2},{value:"Example: Chat Schema",id:"example-chat-schema",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"authorisation-key-group",children:"Authorisation: Key Group"}),"\n",(0,s.jsx)(n.admonition,{title:"Under construction",type:"caution",children:(0,s.jsxs)(n.p,{children:["While this section is almost fully complete and even ",(0,s.jsx)(n.a,{href:"https://github.com/p2panda/p2panda/pull/279",children:"implemented"}),", it might be a little rough at the edges: We're still working on a fun to use high-level API!"]})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"key_group"})," schema is a way to group a set of public keys so that they can act as a single identity. Every member key can have different permissions limiting the extent to which they can publish operations as this single identity. Keys can only be added to a key group with a confirmation from both the key itself and an existing member key with the according permissions. Key groups can also be extended with other key groups, which extends the set of keys in the former with those from the latter. Key groups can serve as a building block for many other concepts in p2panda including identity (handles/usernames), multi-device usage, permissions and moderation."]}),"\n",(0,s.jsx)(n.h2,{id:"use-case",children:"Use Case"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"A key group can be created using a key pair."}),"\n",(0,s.jsxs)(n.li,{children:["A key can be added to a key group, making it a ",(0,s.jsx)(n.em,{children:"member"}),"."]}),"\n",(0,s.jsx)(n.li,{children:"A key can be removed from a key group."}),"\n",(0,s.jsxs)(n.li,{children:["A key group can be added to a key group, making it a ",(0,s.jsx)(n.em,{children:"member"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["Specific ",(0,s.jsx)(n.em,{children:"permissions"})," can be defined for members of a key group.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"A membership can be limited to publishing operations in specific schemas."}),"\n",(0,s.jsxs)(n.li,{children:["A membership can be limited to specific operation actions (e.g. excluding ",(0,s.jsx)(n.code,{children:"DELETE"})," actions).\n8- Specific ",(0,s.jsx)(n.em,{children:"permissions"})," can be defined for individual keys of a key group."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Developers can make key groups the owners of a schema's documents by creating an ",(0,s.jsx)(n.em,{children:"authorised schema"}),".","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Key group members can publish operations for documents that define the key group as their owner."}),"\n",(0,s.jsx)(n.li,{children:"Key group members can not publish operations for that key group's documents when their key group membership doesn't define the required permissions."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"authorised-schemas",children:"Authorised Schemas"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Authorised schemas define a key group as the owner of documents created with them.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Use an authorised schema when you want to enable all key group members with according permissions to update or delete that document."}),"\n",(0,s.jsxs)(n.li,{children:["Documents created from authorised schemas are called ",(0,s.jsx)(n.em,{children:"authorised documents"}),"."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Schemas are ",(0,s.jsx)(n.em,{children:"authorised schemas"})," if they contain a single field of type ",(0,s.jsx)(n.code,{children:"owner"})," that contains:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"either the document view id of a key group,"}),"\n",(0,s.jsx)(n.li,{children:"or the document view id of another authorised document."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Every document of an ",(0,s.jsx)(n.em,{children:"authorised schema"})," has a set of ",(0,s.jsx)(n.em,{children:"authorised public keys"}),". This set can be created by looking at the document pointed at by the ",(0,s.jsx)(n.code,{children:"owner"})," type field:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"if it points at an authorised document, continue from there"}),"\n",(0,s.jsx)(n.li,{children:"if a key group is found: that key group's keys are the document's authorised public keys."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Operations of ",(0,s.jsx)(n.em,{children:"authorised schemas"})," are only materialised if they were created by a key pair included in the ",(0,s.jsx)(n.em,{children:"authorised public keys"})," of the operations's document and if that key pair membership has the required permissions for the operation."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"key-groups",children:"Key groups"}),"\n",(0,s.jsxs)(n.h4,{id:"schema-key_group_v1",children:["Schema ",(0,s.jsx)(n.code,{children:"key_group_v1"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"name: string\nmembers: relation_list(key_group_membership_v1)\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"The name of a key group should be chosen so that its purpose can be understood."}),"\n"]}),"\n",(0,s.jsx)(n.admonition,{title:"Jam Queue",type:"tip",children:(0,s.jsxs)(n.p,{children:["By adding an ",(0,s.jsx)(n.code,{children:"inverse: boolean"})," field here we could allow a) anyone to change a document (wow chaos) b) ",(0,s.jsx)(n.em,{children:"exclude"})," specific keys from editing a document."]})}),"\n",(0,s.jsx)(n.h3,{id:"memberships",children:"Memberships"}),"\n",(0,s.jsxs)(n.h4,{id:"schema-key_group_membership_request_v1",children:["Schema ",(0,s.jsx)(n.code,{children:"key_group_membership_request_v1"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"key_group: relation(key_group_v1)\n? member: owner(key_group_v1)\n"})}),"\n",(0,s.jsxs)(n.p,{children:["A ",(0,s.jsx)(n.em,{children:"key group membership request"}),' is created in order to add its authoring public key to a key group. It says "Hey! Would you mind adding me to this key group?"']}),"\n",(0,s.jsxs)(n.p,{children:["The optional ",(0,s.jsx)(n.code,{children:"member"})," field allows specifying a key group that requests membership instead of the public key that published this operation. A key group membership request that defines a ",(0,s.jsx)(n.code,{children:"member"})," should only be considered valid if its authoring public key has a membership in that key group with ",(0,s.jsx)(n.code,{children:"can_authorise"})," set to ",(0,s.jsx)(n.code,{children:"true"}),"."]}),"\n",(0,s.jsx)(n.admonition,{title:"Jam Queue",type:"info",children:(0,s.jsxs)(n.p,{children:["If a ",(0,s.jsx)(n.code,{children:"member"})," is defined and the membership has ",(0,s.jsx)(n.code,{children:"can_authorise"})," set to false, the member key group can still change the key set of the parent key group by changing its own members. This could be prevented by making ",(0,s.jsx)(n.code,{children:"member"})," a pinned relation."]})}),"\n",(0,s.jsxs)(n.h4,{id:"schema-key_group_membership_v1",children:["Schema ",(0,s.jsx)(n.code,{children:"key_group_membership_v1"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"# defines the owner of this membership\nkey_group: owner(key_group_v1)\n\n# points at the original membership request\nrequest: pinned_relation(key_group_membership_request_v1)\n\n# if set, limit this membership to the schema id specified\n? schema: string\n\n# set true to accept the request, can be set to `false` with a later update\naccepted: boolean\n\n# if true, this membership can authorise membership requests for the key group,  add the key group to other key groups and edit membership limits.\ncan_authorise: boolean\n\n# if true, this membership can create documents owned by the key group\ncan_create: boolean\n\n# if true, this membership can update documents owned by the key group\ncan_update: boolean\n\n# if true, this membership can delete documents owned by the key group\ncan_delete: boolean\n"})}),"\n",(0,s.jsxs)(n.p,{children:["A ",(0,s.jsx)(n.em,{children:"key group membership"})," is created to ",(0,s.jsx)(n.em,{children:"accept"})," or ",(0,s.jsx)(n.em,{children:"reject"})," a group membership request."]}),"\n",(0,s.jsxs)(n.p,{children:["If accepted, the public key that created the ",(0,s.jsx)(n.em,{children:"key group membership request"})," is now included in the key group's key set. If the membership request defines a ",(0,s.jsx)(n.code,{children:"member"})," key group, that key group's key set is included instead."]}),"\n",(0,s.jsxs)(n.p,{children:["If rejected, all ",(0,s.jsx)(n.em,{children:"key group membership requests"})," by the same public key and the same ",(0,s.jsx)(n.code,{children:"member"})," value should be considered invalid."]}),"\n",(0,s.jsxs)(n.h2,{id:"schema-field-definition-field-type-owner",children:["Schema Field Definition: Field Type ",(0,s.jsx)(n.code,{children:"owner"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The field definition looks similar to ",(0,s.jsx)(n.code,{children:"pinned_relation"})]}),"\n",(0,s.jsxs)(n.li,{children:["The schema id this relation references must be an ",(0,s.jsx)(n.em,{children:"authorised schema"}),". Any schema field definition for which this does not hold is invalid."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"example-chat-schema",children:"Example: Chat Schema"}),"\n",(0,s.jsx)(n.p,{children:"In this example we want to represent chat messages and their authors. Authors should have a name and a profile picture. We also want to make sure that only key pairs controlled by the author can publish chat messages that are linked to the auth(or)'s name and picture."}),"\n",(0,s.jsxs)(n.p,{children:["Instances of the new ",(0,s.jsx)(n.code,{children:"account"})," schema have an ",(0,s.jsx)(n.code,{children:"owner"})," pointing at a key group that contains all public keys of a user and a ",(0,s.jsx)(n.code,{children:"picture"})," that contains the profile picture as a base64-encoded ",(0,s.jsx)(n.code,{children:"string"}),".\nWe can use the name field on the key group as an account user name."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsxs)(n.strong,{children:["Schema ",(0,s.jsx)(n.code,{children:"account"}),":"]})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"group: owner(key_group_v1)\npicture: string\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Because it has an ",(0,s.jsx)(n.code,{children:"owner"}),", operations for this ",(0,s.jsx)(n.code,{children:"account"})," schema are only valid if they are signed by one of the keys contained in the key group referred to in the ",(0,s.jsx)(n.code,{children:"owner"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Now we can create the schema for chat messages. It combines the chat message's content with a link to an instance of the ",(0,s.jsx)(n.code,{children:"account"})," schema."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsxs)(n.strong,{children:["Schema ",(0,s.jsx)(n.code,{children:"chat-message"}),":"]})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"content: string\nauthor: owner(account)\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Again, because this uses ",(0,s.jsx)(n.code,{children:"owner"}),", operations for this schema are only valid when signed by one of the keys referred to by the ",(0,s.jsx)(n.code,{children:"owner"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["How could a query for this schema look like? This is a GraphQL schema for a query that retrieves ",(0,s.jsx)(n.code,{children:"chat-message"})," instances, as well as the name and picture of their authors."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"chat-message {\n    fields {\n      content,\n      author {\n        fields {\n          picture,\n          group {\n            fields {\n              name\n            }\n          }\n        }\n    }\n}\n"})})]})}function l(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},1151:(e,n,i)=>{i.d(n,{Z:()=>a,a:()=>o});var s=i(7294);const t={},r=s.createContext(t);function o(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);