"use strict";(self.webpackChunkaquadoggo_website=self.webpackChunkaquadoggo_website||[]).push([[1541],{9812:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>d,contentTitle:()=>i,default:()=>l,frontMatter:()=>o,metadata:()=>c,toc:()=>r});var s=t(5893),n=t(1151);const o={id:"documents-and-schema",title:"Documents & Schema"},i=void 0,c={id:"specifications/aquadoggo/documents-and-schema",title:"Documents & Schema",description:"Documents",source:"@site/docs/specifications/aquadoggo/documents-and-schema.md",sourceDirName:"specifications/aquadoggo",slug:"/specifications/aquadoggo/documents-and-schema",permalink:"/specifications/aquadoggo/documents-and-schema",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{id:"documents-and-schema",title:"Documents & Schema"}},d={},r=[{value:"Documents",id:"documents",level:2},{value:"Schema",id:"schema",level:2}];function h(e){const a={a:"a",code:"code",h2:"h2",p:"p",...(0,n.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(a.h2,{id:"documents",children:"Documents"}),"\n",(0,s.jsxs)(a.p,{children:[(0,s.jsx)(a.a,{href:"/specifications/aquadoggo/data-types/documents",children:"Documents"})," are mutable data items which live on a p2panda network. Authors can create, update and delete documents. A document might be a blog post, a wiki page, a chat message, a user account, a configuration setting, a game board. They are multi-writer capable and have in-built properties which deterministically resolve conflicting writes."]}),"\n",(0,s.jsxs)(a.p,{children:[(0,s.jsx)(a.a,{href:"/specifications/aquadoggo/networking/clients-nodes",children:"Nodes"})," are responsible for persisting documents and offering them on a public API so they can be queried by clients. They also offer the public API for all write actions relating to documents."]}),"\n",(0,s.jsxs)(a.p,{children:["Documents can be assigned to an identity, giving them a concept of ",(0,s.jsx)(a.a,{href:"/specifications/aquadoggo/authorisation",children:"permissions"}),", with the ability to add and remove other identities over the life of a document. ",(0,s.jsx)(a.a,{href:"/specifications/aquadoggo/encryption",children:"Encryption"})," is available via the use of ",(0,s.jsx)(a.code,{children:"MLS"})," encryption."]}),"\n",(0,s.jsx)(a.h2,{id:"schema",children:"Schema"}),"\n",(0,s.jsxs)(a.p,{children:[(0,s.jsx)(a.a,{href:"/specifications/aquadoggo/data-types/schemas",children:"Schema"})," specify the fields and values a document contains. When a document is published or updated, the request must be checked against the claimed schema. If it doesn't pass validation then the request will be rejected. This ensures all data on a p2panda network strictly follows a known schema. An application developer would publish their own schema based on the data required for their needs, or they could reuse schema already existing on their network."]}),"\n",(0,s.jsxs)(a.p,{children:["Some schema are specified as part of the p2panda protocol, these are called ",(0,s.jsx)(a.a,{href:"/specifications/aquadoggo/data-types/schemas#system-schemas",children:"system schema"}),", others are dynamically published by application developers and distributed across the network, these are called ",(0,s.jsx)(a.a,{href:"/specifications/aquadoggo/data-types/schemas#system-and-application-schemas",children:"application schema"})]})]})}function l(e={}){const{wrapper:a}={...(0,n.a)(),...e.components};return a?(0,s.jsx)(a,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},1151:(e,a,t)=>{t.d(a,{Z:()=>c,a:()=>i});var s=t(7294);const n={},o=s.createContext(n);function i(e){const a=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function c(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:i(e.components),s.createElement(o.Provider,{value:a},e.children)}}}]);