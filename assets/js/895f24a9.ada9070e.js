"use strict";(self.webpackChunkaquadoggo_website=self.webpackChunkaquadoggo_website||[]).push([[9432],{4973:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>r});var s=a(5893),i=a(1151);const o={title:"Tutorial: Create a schema"},c=void 0,t={id:"tutorials/fishy",title:"Tutorial: Create a schema",description:"In this tutorial we want to register a new schema using the fishy command line tool and aquadoggo node.",source:"@site/docs/tutorials/fishy.md",sourceDirName:"tutorials",slug:"/tutorials/fishy",permalink:"/tutorials/fishy",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Tutorial: Create a schema"}},d={},r=[{value:"What do I need?",id:"what-do-i-need",level:2},{value:"What is <code>fishy</code>?",id:"what-is-fishy",level:2},{value:"Install <code>fishy</code>",id:"install-fishy",level:3},{value:"What is <code>aquadoggo</code>?",id:"what-is-aquadoggo",level:2},{value:"Install <code>aquadoggo</code>",id:"install-aquadoggo",level:3},{value:"Create a Schema",id:"create-a-schema",level:2},{value:"Start node",id:"start-node",level:2},{value:"Deploy a Schema",id:"deploy-a-schema",level:2},{value:"Querying <code>icecreams</code> documents",id:"querying-icecreams-documents",level:2},{value:"Bonus Round: Updating a schema",id:"bonus-round-updating-a-schema",level:2}];function l(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["In this tutorial we want to register a new schema using the ",(0,s.jsx)(n.a,{href:"https://github.com/p2panda/fishy",children:(0,s.jsx)(n.code,{children:"fishy"})})," command line tool and ",(0,s.jsx)(n.a,{href:"https://github.com/p2panda/aquadoggo",children:(0,s.jsx)(n.code,{children:"aquadoggo"})})," node."]}),"\n",(0,s.jsx)(n.h2,{id:"what-do-i-need",children:"What do I need?"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Editor"}),"\n",(0,s.jsx)(n.li,{children:"Terminal"}),"\n",(0,s.jsx)(n.li,{children:"Browser"}),"\n"]}),"\n",(0,s.jsxs)(n.h2,{id:"what-is-fishy",children:["What is ",(0,s.jsx)(n.code,{children:"fishy"}),"?"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"fishy"})," is a command-line-tool for creating and publishing schema onto the p2panda network. It allows you to define collections of schema in a human readable ",(0,s.jsx)(n.code,{children:"toml"})," file and then encodes the schema in the correct format for publishing directly to a node, sharing via other channels, or embedding in an application."]}),"\n",(0,s.jsxs)(n.p,{children:["We'll go through the steps one at a time below, for now just know that ",(0,s.jsx)(n.code,{children:"fishy"})," is your friend when it comes to creating schema for your application."]}),"\n",(0,s.jsxs)(n.h3,{id:"install-fishy",children:["Install ",(0,s.jsx)(n.code,{children:"fishy"})]}),"\n",(0,s.jsxs)(n.p,{children:["Head over to the ",(0,s.jsx)(n.a,{href:"https://github.com/p2panda/fishy/releases",children:"Releases"})," page and download the pre-compiled binary for your platform. This tutorial was written using ",(0,s.jsx)(n.code,{children:"v0.2.1"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"Or on the command line:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"curl -L https://github.com/p2panda/fishy/releases/download/v0.2.1/fishy-v0.2.1-x86_64-unknown-linux-gnu.tar.gz | tar -xz\n"})}),"\n",(0,s.jsxs)(n.p,{children:["For the rest of the tutorial we will run fishy simply using the command ",(0,s.jsx)(n.code,{children:"./fishy"}),". If required, in your own commands adjust this to match the name of the binary you downloaded or rename it to accordingly."]}),"\n",(0,s.jsxs)(n.h2,{id:"what-is-aquadoggo",children:["What is ",(0,s.jsx)(n.code,{children:"aquadoggo"}),"?"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"aquadoggo"})," is a p2panda node implementation and command-line-tool, it's our gateway into the p2panda network. You can learn more about it in the ",(0,s.jsx)(n.a,{href:"/tutorials/aquadoggo",children:"Set up a local node"})," tutorial."]}),"\n",(0,s.jsxs)(n.h3,{id:"install-aquadoggo",children:["Install ",(0,s.jsx)(n.code,{children:"aquadoggo"})]}),"\n",(0,s.jsxs)(n.p,{children:["Head over to the ",(0,s.jsx)(n.a,{href:"https://github.com/p2panda/aquadoggo/releases",children:"Releases"})," page and download the pre-compiled binary for your platform. This tutorial was written using ",(0,s.jsx)(n.code,{children:"v0.7.0"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"Or on the command line:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"curl -L https://github.com/p2panda/aquadoggo/releases/download/v0.7.0/aquadoggo-v0.7.0-x86_64-unknown-linux-gnu.tar.gz | tar -xz\n"})}),"\n",(0,s.jsxs)(n.p,{children:["For the rest of the tutorial we will run aquadoggo simply using the command ",(0,s.jsx)(n.code,{children:"./aquadoggo"}),". If required, in your own commands adjust this to match the name of the binary you downloaded or rename it to accordingly."]}),"\n",(0,s.jsx)(n.h2,{id:"create-a-schema",children:"Create a Schema"}),"\n",(0,s.jsxs)(n.admonition,{title:"When/why do we create schema?",type:"info",children:[(0,s.jsxs)(n.p,{children:["All ",(0,s.jsx)(n.code,{children:"p2panda"})," applications will have a collection of schema which they require, for example, a blog might need ",(0,s.jsx)(n.code,{children:"blogs"}),", ",(0,s.jsx)(n.code,{children:"blog_posts"})," and ",(0,s.jsx)(n.code,{children:"comments"}),", these schema describe the shape of the documents the application will handle. ",(0,s.jsx)(n.code,{children:"aquadoggo"})," looks at these schema to build an API which fits your use and to decide what data to look for on the network."]}),(0,s.jsxs)(n.p,{children:["Creating and publishing schema might well be the first step you take when building an application, once you've done this you will have a very useful ",(0,s.jsx)(n.code,{children:"GraphQl"})," interface available for publishing and querying data to/from the network."]})]}),"\n",(0,s.jsxs)(n.p,{children:["Ok, we want to create our own schema. To get the process started, make sure you're in the ",(0,s.jsx)(n.code,{children:"fishy"})," directory and then run the following command:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"./fishy init\n"})}),"\n",(0,s.jsxs)(n.p,{children:['A dialogue will ask you for the name of your first schema. Enter a name, for example "cafes" and press ',(0,s.jsx)(n.code,{children:"enter"})," (don't worry, you can change this later). You will now find a ",(0,s.jsx)(n.code,{children:"schema.toml"})," and ",(0,s.jsx)(n.code,{children:"secret.txt"})," file in your folder."]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"schema.toml"})," contains some example schema definitions which we will edit in a moment, the ",(0,s.jsx)(n.code,{children:"secret.txt"})," contains the private key which will be used for signing commits when building the schema."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"schema.toml"})," is where we define our schema, with any text editor edit the file so it contains the following definition:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-toml",children:'[cafes]\ndescription = "All the cafes where icecream is sold"\n\n[cafes.fields]\nname = { type = "str" }\naddress = { type = "str" }\nopening_year = { type = "int" }\n\n[icecreams]\ndescription = "Icecream flavours you can get in cafes"\n\n[icecreams.fields]\nname = { type = "str" }\nsweetness = { type = "str" }\ncafes = { type = "relation_list", schema = { name = "cafes" } }\n'})}),"\n",(0,s.jsxs)(n.p,{children:["There's a lot going on here! We're defining two schema, ",(0,s.jsx)(n.code,{children:"cafe"})," and ",(0,s.jsx)(n.code,{children:"icecream"}),", they both have a ",(0,s.jsx)(n.code,{children:"description"})," string and a list of ",(0,s.jsx)(n.code,{children:"fields"}),". The ",(0,s.jsx)(n.code,{children:"description"})," is required and at least one ",(0,s.jsx)(n.code,{children:"field"})," must be defined for each schema."]}),"\n",(0,s.jsxs)(n.p,{children:["The list of fields describe key-value pairs comprising of the field name, and it's type. Each key will be the fields name, it can be any string as long as it follows the ",(0,s.jsx)(n.a,{href:"/specifications/aquadoggo/data-types/schemas",children:"naming rules"}),". The type object of each item indicates the fields type. Possible types are:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"int"}),", which is an integer number (",(0,s.jsx)(n.code,{children:"i64"}),")."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"float"}),", which is a float number (",(0,s.jsx)(n.code,{children:"f64"}),")."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"bool"}),", which can be ",(0,s.jsx)(n.code,{children:"true"})," or ",(0,s.jsx)(n.code,{children:"false"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"str"}),", which can be any sort of text."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:".. and now it gets interesting, there is even more:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"relation"}),", which can be a reference to another document."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"relation_list"}),", which can be a list of references to many documents!"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"pinned_relation"}),", which can be a reference to a ",(0,s.jsx)(n.em,{children:"document view"}),". This is a document in a past, historical version. Like an ",(0,s.jsx)(n.em,{children:"archived"})," version you wanted to keep."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"pinned_relation_list"}),", which is a list of document views!"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["If we look at the ",(0,s.jsx)(n.code,{children:"cafes"})," field in our ",(0,s.jsx)(n.code,{children:"[icecreams.fields]"})," list, you can see that there is an additional ",(0,s.jsx)(n.code,{children:"schema"})," value in the field type object. This indicates that any documents which are related to in the ",(0,s.jsx)(n.code,{children:"cafes"})," field will be of the type ",(0,s.jsx)(n.code,{children:"cafes"}),", the name used here refers to the schema defined earlier in the file."]}),"\n",(0,s.jsxs)(n.admonition,{title:"Why relations?",type:"info",children:[(0,s.jsx)(n.p,{children:"One benefit of defining relations between schemas is that the node's query API becomes even more powerful. If I want to check all the cafes where my favorite ice cream flavours are sold, I can write the following query:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:"{\n  all_<ICECREAMS_SCHEMA_ID> {\n    documents {\n      fields {\n        name\n        sweetness\n        cafes {\n          documents {\n            fields {\n              name\n              address\n              opening_year\n            }\n          }\n        }\n      }\n    }\n  }\n}\n"})}),(0,s.jsxs)(n.p,{children:["We can write nested queries like this because we defined a relation between ",(0,s.jsx)(n.code,{children:"icecreams"})," and ",(0,s.jsx)(n.code,{children:"cafes"}),"!!"]})]}),"\n",(0,s.jsxs)(n.p,{children:["You can build the schema and commit them to ",(0,s.jsx)(n.code,{children:"schema.lock"})," by running the following command:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"./fishy build\n"})}),"\n",(0,s.jsx)(n.p,{children:"This should output a result which looks very similar to this:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'fishy: Create operations and sign entries to update schema\n\n- schema_path: /home/sandreae/Code/mushroom-app-tutorial/schemas/icecream_schema.toml\n- lock_path: /home/sandreae/Code/mushroom-app-tutorial/schemas/schema.lock\n- private_key_path: /home/sandreae/Code/mushroom-app-tutorial/schemas/secret.txt\n\nThe following changes (add, change, remove) will be applied:\n\ncafes_002092aa71ef4d4b52bd082c15b208d4c1aa7134181beb0e5f75542f794717d10617\n\nName: cafes\nDescription: "All the cafes where icecream is sold"\n\u256d\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 # \u2506 Field Name   \u2506 Field Type \u2502\n\u255e\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1 \u2506 opening_year \u2506 int        \u2502\n\u251c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 2 \u2506 address      \u2506 str        \u2502\n\u251c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 3 \u2506 name         \u2506 str        \u2502\n\u2570\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\nicecreams_0020fe08a0b2f3a7f395df580db551c823e73e9936420ece7c5eae5a27b8d71c8632\n\nName: icecreams\nDescription: "Icecream flavours you can get in cafes"\n\u256d\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 # \u2506 Field Name \u2506 Field Type           \u2502\n\u255e\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1 \u2506 name       \u2506 str                  \u2502\n\u251c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 2 \u2506 cafes      \u2506 relation_list(cafes) \u2502\n\u251c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 3 \u2506 sweetness  \u2506 str                  \u2502\n\u2570\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\nPublic key used for signing: 8e4e1af5417f64306862b123ab621739f025449e0da23dc0e1049e88cc2569cb\n\nDo you want to commit these changes (8 total)? yes\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"fishy"})," will automatically show you the changes which will be committed and ask for your confirmation. Hit ",(0,s.jsx)(n.code,{children:"y"})," to confirm."]}),"\n",(0,s.jsxs)(n.p,{children:["So, what just happened? ",(0,s.jsx)(n.code,{children:"fishy"})," looked at the schema definitions in ",(0,s.jsx)(n.code,{children:"schema.toml"})," and then created, signed and encoded entries containing the schema definitions for us. This version of the schema now lives in ",(0,s.jsx)(n.code,{children:"schema.lock"}),". It contains entries which are ready to be published to a node."]}),"\n",(0,s.jsxs)(n.p,{children:["The printed output also gives us some useful information, as well as outlining the fields of the schema we just created, it tells us the ",(0,s.jsx)(n.code,{children:"schema_id"})," (eg. ",(0,s.jsx)(n.code,{children:"icecreams_0020fe08a0b2f3a7f395df580db551c823e73e9936420ece7c5eae5a27b8d71c8632"}),") and the public key of the signing author."]}),"\n",(0,s.jsx)(n.h2,{id:"start-node",children:"Start node"}),"\n",(0,s.jsx)(n.p,{children:"In a moment we'll be publishing schema to a node, let's start it now so it's ready when we need it."}),"\n",(0,s.jsxs)(n.p,{children:["In a new terminal (making sure you're in the directory where you downloaded ",(0,s.jsx)(n.code,{children:"aquadoggo"})," earlier) run the following command."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"./aquadoggo --log-level=info\n"})}),"\n",(0,s.jsx)(n.p,{children:"You should see the following output (as well as some additional info logging omitted for brevity):"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"                       \u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\n                      \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588       \u2588\u2588\u2588\u2588\u2588\u2588\n                      \u2588\u2588\u2588\u2588\u2588\u2588            \u2588\u2588\u2588\n                       \u2588\u2588\u2588\u2588\u2588              \u2588\u2588\n                       \u2588     \u2588\u2588\u2588\u2588      \u2588\u2588\u2588\u2588\u2588\n                      \u2588     \u2588\u2588\u2588\u2588\u2588\u2588   \u2588 \u2588\u2588\u2588\u2588\u2588\n                     \u2588\u2588      \u2588\u2588\u2588\u2588   \u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\n                    \u2588\u2588\u2588\u2588\u2588         \u2588\u2588\u2588\u2588\u2588\u2588    \u2588\n                   \u2588\u2588\u2588\u2588\u2588\u2588\u2588                \u2588\u2588\n                   \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588   \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n                   \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588      \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n                   \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588         \u2588\u2588\u2588\u2588\n              \u2588\u2588\u2588\u2588\u2588\u2588    \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588              \u2588\u2588\n          \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588        \u2588\u2588\u2588\u2588\u2588                 \u2588\n           \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588        \u2588\u2588          \u2588\u2588\u2588       \u2588\u2588\n             \u2588\u2588\u2588\u2588\u2588\u2588        \u2588            \u2588           \u2588\u2588\n                \u2588\u2588       \u2588\u2588             \u2588\u2588\u2588\u2588\u2588\u2588\u2588     \u2588\u2588\n              \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588                      \u2588\u2588\u2588\u2588\u2588\u2588\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588                   \u2588\u2588\u2588\u2588\u2588\u2588\n\u2588\u2588\u2588\u2588   \u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588            \u2588   \u2588\u2588\u2588\u2588\n  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588   \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588       \u2588\u2588\u2588    \u2588\u2588\u2588\u2588\u2588\u2588\u2588\n    \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588             \u2588\u2588\u2588\u2588\u2588\u2588    \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588   \u2588\u2588\u2588\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588                      \u2588\u2588\n\naquadoggo v0.7.0\n\nNo config file provided\n\nConfiguration\n\nAllow schema IDs: * (any schema id)\nDatabase URL: memory (data is not persisted)\nmDNS: enabled\nPrivate key: ephemeral (not persisted)\nRelay mode: disabled\n\nNode is ready!\n\nGo to http://0.0.0.0:2020/graphql to use GraphQL playground\nPeer id: 12D3KooWEWfho5JPyoWn97V2Zn7JFYcepA4CV1Dsb5tFRWyzoG9g\nNode is listening on 0.0.0.0:2022\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Now you have a local node running on port ",(0,s.jsx)(n.code,{children:"2020"}),". You can check if everything is alright by opening your browser and surfing to ",(0,s.jsx)(n.a,{href:"http://localhost:2020/graphql",children:"http://localhost:2020/graphql"}),", do you see the GraphQL playground? Super. Let's play with it soon!"]}),"\n",(0,s.jsx)(n.h2,{id:"deploy-a-schema",children:"Deploy a Schema"}),"\n",(0,s.jsxs)(n.p,{children:["The operations for our schema currently live in the ",(0,s.jsx)(n.code,{children:"schema.lock"})," file, but actually we want them on our ",(0,s.jsx)(n.code,{children:"aquadoggo"})," node. For this we use another ",(0,s.jsx)(n.code,{children:"fishy"})," command:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"./fishy deploy\n"})}),"\n",(0,s.jsxs)(n.p,{children:["You should see the following output from ",(0,s.jsx)(n.code,{children:"fishy"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"fishy: Deploy created schemas on a node\n\n- lock_path: /home/sandreae/Code/mushroom-app-tutorial/schemas/schema.lock\n- endpoint: http://localhost:2020/graphql\n\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 8/8\nSuccessfully deployed 8 commits on node (ignored 0).\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Interestingly, if you check the logs of your running ",(0,s.jsx)(n.code,{children:"aquadoggo"})," node then you can see this:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"[2024-01-22T13:08:39Z INFO  aquadoggo::schema::schema_provider] Updating cafes d10617\n[2024-01-22T13:08:39Z INFO  aquadoggo::graphql::schema] Changed schema cafes d10617, rebuilding GraphQL API\n[2024-01-22T13:08:39Z INFO  aquadoggo::schema::schema_provider] Updating icecreams 1c8632\n[2024-01-22T13:08:39Z INFO  aquadoggo::graphql::schema] Changed schema icecreams 1c8632, rebuilding GraphQL API\n"})}),"\n",(0,s.jsx)(n.p,{children:"We can see that the node received the published schema and automatically re-built the GraphQL API for us."}),"\n",(0,s.jsxs)(n.p,{children:["You can now visit ",(0,s.jsx)(n.a,{href:"http://localhost:2020/graphql",children:"http://localhost:2020/graphql"})," to see your new schema as well as the dynamically constructed query endpoints!"]}),"\n",(0,s.jsxs)(n.h2,{id:"querying-icecreams-documents",children:["Querying ",(0,s.jsx)(n.code,{children:"icecreams"})," documents"]}),"\n",(0,s.jsxs)(n.p,{children:["We've created a new field now, so we can also directly inspect it via the GraphQL playground of the ",(0,s.jsx)(n.code,{children:"aquadoggo"})," node. For this you can just surf to ",(0,s.jsx)(n.a,{href:"http://localhost:2020/graphql",children:"http://localhost:2020/graphql"})," and run the following query, replacing ICECREAMS_SCHEMA_ID with the schema id output when you ran ",(0,s.jsx)(n.code,{children:"deploy"})," earlier:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:"{\n  all_<ICECREAMS_SCHEMA_ID> {\n    documents {\n      fields {\n        name\n        sweetness\n        cafes {\n          documents {\n            fields {\n              name\n              address\n              opening_year\n            }\n          }\n        }\n      }\n    }\n  }\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Of course, this query won't return any results because we didn't create any ",(0,s.jsx)(n.code,{children:"cafes"})," or ",(0,s.jsx)(n.code,{children:"icecreams"})," documents yet. So let's publish some!"]}),"\n",(0,s.jsxs)(n.p,{children:["Using the form below you can publish a cafe documents to your local node. Take the schema id which fishy output after you created your ",(0,s.jsx)(n.code,{children:"cafes"})," schema earlier (eg ",(0,s.jsx)(n.code,{children:"cafes_002092aa71ef4d4b52bd082c15b208d4c1aa7134181beb0e5f75542f794717d10617"}),") and assign it to the ",(0,s.jsx)(n.code,{children:"schemaId"})," value in the code editor below. Then try clicking ",(0,s.jsx)(n.code,{children:"Create"}),". It should publish a cafe document to your local node!!"]}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["The code below is using ",(0,s.jsx)(n.code,{children:"Session"})," which is imported from our TypeScript SDK ",(0,s.jsx)(n.code,{children:"shirokuma"})," and helps handle your clients connection to a node. It's outside the scope of this tutorial to go into detail on document creation, but check-out the ",(0,s.jsx)(n.a,{href:"/tutorials/mushroom-app",children:"Let's build a mushroom app!"})," tutorial on publishing data using ",(0,s.jsx)(n.a,{href:"https://github.com/p2panda/shirokuma",children:(0,s.jsx)(n.code,{children:"shirokuma"})})," or try out our tiny CLI client ",(0,s.jsx)(n.a,{href:"https://github.com/p2panda/send-to-node",children:(0,s.jsx)(n.code,{children:"send-to-node"})}),"."]})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",metastring:"live",live:!0,children:"function CafeApp(props) {\n  const createCafe = async (session, values) => {\n    return await session.create(values, {\n      endpoint: 'http://localhost:2020/graphql',\n      schemaId: '', // \ud83d\udc48 change this to your own schema id.\n    });\n  };\n\n  return (\n    <App header=\"\ud83d\udc3c \ud83c\udf66\" sayHello={true}>\n      <CafeForm createCafe={createCafe}></CafeForm>\n    </App>\n  );\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"You can now query your cafes in the graphql playground like so:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:"{\n  all_<CAFES_SCHEMA_ID> {\n    documents {\n      fields {\n        name\n        address\n        opening_year\n      }\n      meta {\n        documentId\n      }\n    }\n  }\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"bonus-round-updating-a-schema",children:"Bonus Round: Updating a schema"}),"\n",(0,s.jsxs)(n.p,{children:["It is also possible to update an existing schema using ",(0,s.jsx)(n.code,{children:"fishy"}),". To do this, first open the ",(0,s.jsx)(n.code,{children:"schema.toml"})," file in your editor and add a ",(0,s.jsx)(n.code,{children:"rating"})," field to the ",(0,s.jsx)(n.code,{children:"icecreams"})," schema."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-toml",children:'[cafes]\ndescription = "All the cafes where icecream is sold"\n\n[cafes.fields]\nname = { type = "str" }\naddress = { type = "str" }\nopening_year = { type = "int" }\n\n[icecreams]\ndescription = "Icecream flavours you can get in cafes"\n\n[icecreams.fields]\nname = { type = "str" }\nsweetness = { type = "str" }\nrating = { type = "float" }\ncafes = { type = "relation_list", schema = { name = "cafes" } }\n'})}),"\n",(0,s.jsxs)(n.p,{children:["To update the schema we run the ",(0,s.jsx)(n.code,{children:"build"})," command:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"./fishy build\n"})}),"\n",(0,s.jsx)(n.p,{children:"The output will tell us what changes are to be applied and check if we want to proceed:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'fishy: Create operations and sign entries to update schema\n\n- schema_path: /home/sandreae/Code/mushroom-app-tutorial/schemas/icecream_schema.toml\n- lock_path: /home/sandreae/Code/mushroom-app-tutorial/schemas/schema.lock\n- private_key_path: /home/sandreae/Code/mushroom-app-tutorial/schemas/secret.txt\n\nThe following changes (add, change, remove) will be applied:\n\nicecreams_00203a83b21416a852089d66f6c9c79c7ec4ddb74234d74b51d4d4535358c4342905\nPreviously: icecreams_0020fe08a0b2f3a7f395df580db551c823e73e9936420ece7c5eae5a27b8d71c8632\n\nName: icecreams\nDescription: "Icecream flavours you can get in cafes"\n\u256d\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 # \u2506 Field Name \u2506 Field Type           \u2502\n\u255e\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1 \u2506 name       \u2506 str                  \u2502\n\u251c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 2 \u2506 cafes      \u2506 relation_list(cafes) \u2502\n\u251c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 3 \u2506 rating     \u2506 float                \u2502\n\u251c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 4 \u2506 sweetness  \u2506 str                  \u2502\n\u2570\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\nPublic key used for signing: 8e4e1af5417f64306862b123ab621739f025449e0da23dc0e1049e88cc2569cb\n\nDo you want to commit these changes (2 total)? [y/n]\n'})}),"\n",(0,s.jsx)(n.p,{children:"(in the actual output the changes are highlighted in nice colours....)"}),"\n",(0,s.jsxs)(n.p,{children:["Confirming here will update the ",(0,s.jsx)(n.code,{children:"schema.lock"})," file, then all we need to do is ",(0,s.jsx)(n.code,{children:"deploy"})," again:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"./fishy deploy\n"})}),"\n",(0,s.jsxs)(n.p,{children:["If you once again check ",(0,s.jsx)(n.a,{href:"http://localhost:2020/graphql",children:"http://localhost:2020/graphql"})," you can see that both our original and updated ",(0,s.jsx)(n.code,{children:"icecreams"})," schema are now in the GraphQL API. These two schema are views onto the same schema document in it's original and updated state."]})]})}function h(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},1151:(e,n,a)=>{a.d(n,{Z:()=>t,a:()=>c});var s=a(7294);const i={},o=s.createContext(i);function c(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);